sapply(mtcars[myvars], mystats)
attach(mtcars)
aggdata <- aggregate(mtcars, by=list(cyl, gear), FUN=mean, na.rm=TRUE)
aggdata
aggdata[!c(cyl, gear)]
aggdata(!c("cyl", "gear"))
aggdata
aggdata[!c("cyl", "gear")]
aggdata[c(1,2, 3, 4, 5, 6, 7,8, 9, 10)]
dstats <- function(x)sapply(x, mystats)
by(mtcars[myvars], mtcars$am, dstats)
library(vcd)
head(Arthritis)
table(Improved)
mytable <- with(Arthritis, table(Improved))
mytable
prop.table(mytable)
xtabs(~ Treatment + Improved, data=Arthritis)
prop.table(mytable, 1)
margin.table(mytable, 1)
mytable
mytable <- xtabs(~ Treatment + Improved, data=Arthritis)
margin.table(mytable, 1)
margin.table(mytable, 2)
prop.table(mytable, 1)
prop.table(mytable, 2)
options(digits=3)
prop.table(mytable, 2)
options(digits=5)
prop.table(mytable, 2)
prop.table(mytable, 1)
attach(mtcars)
detach(mtcars)
detach(mtcars)
attach(mtcars)
fit <- lm(mpg ~ (hp + wt)^2, data=mtcars)
summary(fit)
library(effects)
install.packages("effects"0)
install.packages("effects")
library(effects)
plot(effect("hp:wt", fit,,list(wt=c(2.2, 3.2, 4.2)), multiline=TRUE))
plot(effect("hp:wt", fit,,list(wt=c(2.2, 3.2, 4.2))), multiline=TRUE)
states <- as.data.frame(state.x77[, c("Murder", "Population", "Illiteracy", "Income", "Frost")])
fit <- ln(Muder ~ Population + Illiteracy + Income + Frost, data=states)
fit <- lm(Muder ~ Population + Illiteracy + Income + Frost, data=states)
fit <- lm(Murder ~ Population + Illiteracy + Income + Frost, data=states)
confint(fit)
fit <- lm(weight ~ height, data=women)
par(mfrow=c(2.2))
par(mfrow=c(2,2))
plot(fit)
?par()
plot(fit)
fit2 <- lm(weight ~ height + I(height)^2, data=women)
plot(fit2)
par(mfrow=c(2,2))
plot(fit2)
plot(fit2)
plot(fit)
plot(fit2)
plot(fit2)
fit2 <- lm(weight ~ height + I(height^2), data=women
)
par(mfrow=c(2,2))
plot(fit2)
newfit <- lm(weight ~ height + I(height^2), data=women[-c(13,15),])
plot(newfit)
fit <- lm(Murder ~ Population + Illiteracy + Income + Frost, data=states)
par(mfrow, c(2,2))
par(mfrow=c(2,2))
plot(fit)
qqPlot(fit, labels=row.names(states), id.method="identify", simulate=TRUE, main="Q-Q Plot")
library(car)
install.packages("car")
install.packages("car")
library(car)
qqPlot(fit, labels = row.names(states), id.method="identify", simulate = TRUE, main= "Q-Q Plot")
states["Nevada",]
fitted(fit)["Nevada"]
savehistory("2016_07_23" = ".Rhistory")
savehistory("2016_07_23", file= ".Rhistory")
savehistory("latestRworkspace.Rhistory")
_1a <- c(1:20)
a1 <- c(1:20)
a1 <- c(1:20)
b1 <- -c(1:20)
b1 <- rev(a1)
c1 <- c(a1, b1[-1])
c1
tmp <- c(4,6,3)
tmp
?rep
e1 <- rep(tmp, 10)
f1 <- rep(tmp, c(10, 20, 30))
f1
rep(1:4, each=2, len=4)
rep(1:4, each=2, len=10)
rep(tmp, each=10, len=29)
rep(tmp, 10, len=29)
rep(tmp, 10, len=31)
test= rep(tmp, 10, len(31))
test= rep(tmp, 10, len=31)
test[c(4)]
as.data.frame(test)
str(test)
class(test)
test= rep(tmp, 10, len=32)
tsst
test
rep(tmp, 10, len=40)
rep(tmp, 2, len=40)
rep(tmp, len=40)
x <- c(3:6, step=0.1)
x
?C
?c()
?seq()
x <- seq(from=3, to=6, by=0.1)
x
class(x)
?exp
exp(x)
y <- exp(x) * cos(x)
y
a3x <- seq(1, 34, 4)
a3x <- seq(1, 34, 3)
a3x
a3y <- seq(3, 36, 3)
a3y
0.1^a3x
a3 <- (0.1^a3x)*(0.2^a3y)
a3
2/c(1:25)
b3 <- (2^c(1:25))/c(1:25)
b3
i <- c(10:100)
i_func <- (i^3 + 4*i^2)
length(i_func)
length(i)
10^3 + 4*i^2
10^3 + 4*100
sum(i_func)
sum(c(10:100)^3 + 4* c(10:100)^2)
i <- c(1:25)
first <- (2^i)/i
second <- (3^i)/(i^2)
sum(first + second)
sum((2^c(1:25))/c(1:25) + (3^c(1:25))/(c(1:25)^2))
?paste
paste(1:12)
paste(rep("label", 30), c(1:30))
paste(rep("fn", 30), c(1:30), sep="")
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
length(xVec)
length(yVec)
newXVec <- xVec[1:length(xVec)-1]
length(newXVec)
newVec <- yVec[-1] - newXVec
length(newVec)
c(1:10)
c[-1]
a <- c(1:10)
a[-1]
newVec <- xVec[c(1:248)] + 2*xVec[c(2:249)] - xVec[c(3:250)]
length(newVec)
sum((exp(-1*xVec[2:250]))/(xVec[1:249] + 10))
gt600 <- yVec[>600]
for (i in 1:250)
not
newVec <- c()
newVec
for (i in 1:250)
if (yVec[i] > 600) newVec <- c(newVec, yVec[i])
newVec
newVec <- ()
newVec <- c()
idx <- c()
for (i in 1:250)
if (yVec[i] > 600)
newVec <- c(newVec, yVec[i])
idx <- c(idx, i)
i
idx
newVec
newVec <- c()
newVec
idx <- c()
idx
i = 0
i
for (i in 1:250)
if(yVec[i] > 600)
newVec <- c(newVec, yVec[i])
idx <- c(idx, i)
i
idx
idx <- c()
for (i in 1:250)
if(yVec[i] > 600)
idx <- c(idx, i)
id
idx
idx <- c()
newVec <- ()
for (i in 1:250)
if(yVec[i] > 600) {}
yVec
yVec <- c()
idx <- c()
i = 0
for (i in 1:250)
if(yVec[i] > 600) {
newVec <- c(newVec, yVec[i])
idx <- c(idx, i)
}
idx
yVec
for (i in 1:250)
if(yVec[i] > 600) newVec <- c(newVec, yVec[i])
i = 0
for (i in 1:250)
if (yVec[i] > 600) newVec <- c(newVec, yVec[i])
yVec
set.seed(50)
yVec <- sample(0:999, 250, replace=T)
for (i in 1:250)
if(yVec[i] > 600) newVec <- c(newVec, yVec[i])
if(yVec[i] > 600) idx <- c(idx, i)
idx
newVec
xVec[idx]
xVec
idx
yVec
for (i in 1:250)
if(yVec[i] > 600) idx <- c(idx, i)
xVec[idx]
x_bar <- mean(xVec)
xVec - x_bar
newVec <- sqrt(abs(xVec - mean(xVec)))
max(yVec)
yVec[yVec > 200]
yVec
yVec[ yVec > (max(yVec)-200)]
xVec[xVec %% 2 == 0]
yVec
order(yVec)
sort(yVec)
?order
order(yVec)
yVec
test <- c(1, 5, 2,4,9)
order(test)
test <- c(10, 30, 15, 20, 19, 11)
order(test)
xVec[order(yVec)]
c(T,F,F)
yVec[c(T,F,F)]
yVec
c(1, 4, 7)
yVec[c(1,4, 7)]
seq(1, 250, 3)
yVec[seq(1, 250, 3)]
yVec[c(T,F,F)]
?cumprod
c(1:38)
test <- seq(2, 38, 2)
test
test2 <- seq(3, 39, 2)
test2
cumprod(test/test2)
8/15
1+sum(cumprod(seq(2,38, 2)/seq(3,39, 2)))
A <- matrix(c(1, 5, -2, 1, 2, -1, 3, 6, -3), nrow=3, ncol=3, byrow = FALSE)
A
A^3
A * A * A
A .* A
A %*% A %*% A
A[, 3]
sum(A[,3])
A[,2]
A[,2] + A[,3]
A[,2] + A[,1]
A[,3] <- A[,1] + A[,2]
A
ten <- rep(10, 15)
ten
negTen <- -ten
negTen
B <- as.matrix(cbind(ten, negTen, ten))
B
-rep(10, 15)
t(B) %*% B
?matE
?row
matE <- matrix(0, nrow=6, ncol=6)
matE
row(matE)
col(matE)
abs(row(matE) - col(matE))
abs(col(matE) - row(matE))
matE
row(matE)
col(matE)
matE[abs(row(matE)-col(matE))==1] <- 1
matE
?outer
x < 1:9
x <- 1:9
x
names(x) <- x
x
x <- NULL
x
class(x)
x <- 1:9; names(x)<-x
x
x %o% x
a <- 0:4
a
outer(a, a, FUN="add")
outer(a, a, FUN="sum")
a %o% a
a
outer(a, a, FUN="+")
outer(0:4, 0:4, FUN = "+")
y <- c(7, -1, -3, 5, 17)
A <- matrix(0, nrow=5, ncol=5)
A
outer(1:5 1:5, FUN="-")
outer(1:5, 1:5, FUN="-")
outer(1:5, 1:5, FUN="-")
abs(row(A) - col(A))+1
abs(row(A) - col(A))
A <- abs(row(A) - col(A))+1
A
y
solve(y, A)
solve(t(y), A)
solve(A, y)
c(1, 4)
c(1:16) %% 4
a <- matrix(c(1:25) %% 5, nrow=5, ncol=5)
a
a <- matrix(c(1:25) %% 5, byrow = TRUE, nrow=5, ncol=5)
a
c(1:4)
c(1:4)%%2
a <- matrix(c(1:5), byrow= T, nrow=5, ncol=5)
a
a <- matrix(c(1:10), byrow= T, nrow=5, ncol=5)
a
a <- matrix(c(1:7), byrow= T, nrow=5, ncol=5)
a
a <- matrix(c(1:4), nrow=5, ncol=5, byrow=t)
a <- matrix(c(1:4), nrow=5, ncol=5, byrow=T)
a
a <- matrix(c(1:5), nrow=5, ncol=5, byrow=T)
a
outer(a,a,FUN="+")
a <- c(1:5)
a <- c(1:4)
outer(a,a, FUN="+")
a <- c(1:5)
outer(a,a, FUN="+")
outer(a,a, FUN="+")%%5
a <- c(0:4)
outer(a,a, FUN=")")
outer(a,a, FUN="+")
outer(a,a, FUN="+")%%5
a <- c(0:())
a <- c(0:9)
outer(a,a, FUN='+')
outer(a,a, FUN='+')%%10
set.seed(75)
aMat <- matrix(sample(10, size=60, replace=T), nr=6)
aMat
aMat[aMat>4]
aMat[1,]>4
aMat[c(1:6),]>4
aMat[aMat[c(1:6)]>4]
aMat[aMat[c(1:6),]>4]
?apply
apply(aMat, MARGIN=c(1), FUN=function(x){sum(x)>4})
apply(aMat, 1, function(x){sum(x>4)})
aMat
a <- c(1:6)
apply(c(1:6), 1, FUN="^2")
apply(c(1:6), 1, function(x){x^2})
apply(c(1:6), 2, function(x){x^2})
c(1:6)
c(1:6)^2
apply(cbind(c(1:5), c(0:4)), 2, function(x){x^2})
apply(cbind(c(1:5), c(0:4)), c(1,2), function(x){x^2})
install.packages("AER")
library(AER)
R.Version()
library("AER")
install.packages("AER")
library("AER")
data(Affairs, package="AER")
summary(Affairs)
?Affairs
table(Affairs$affairs)
Affairs$affairs
length(Affairs$affairs)
attach(Affairs)
affairs
Affairs$ynaffair[Affairs$affairs > 0] <- 1
Affairs$ynaffair[Affairs$affairs == 0] <- 1
Affairs$ynaffair[Affairs$affairs == 0] <- 0
ynaffair
Affairs$ynaffair
table(Affairs$ynaffair)
Affairs$ynaffair <- factor(Affairs$ynaffair, levels=c(0,1), labels=c("No", "Yes"))
table(Affairs$ynaffair)
fit.full <- glm(ynaffair ~ gender + age + yearsmarried + children + religiousness + education + occupation + rating, data=Affairs, family=binomial(link="logit"))
summary(fit.full)
fit.full <- glm(ynaffair ~ age + yearsmarried + religiousness + rating, data=Affairs, family=binomial(link="logit"))
summary(fit.full)
fit.full <- glm(ynaffair ~ gender + age + yearsmarried + children + religiousness + education + occupation + rating, data=Affairs, family=binomial(link="logit"))
fit.reduced <- glm(ynaffair ~ age + yearsmarried + religiousness + rating, data=Affairs, family=binomial(link="logit"))
summary(fit.reduced)
anova(fit.reduced, fit.full, test="Chisq")
fit.reduced$coefficients
exp(fit.reduced$coefficients)
exp(confint(fit.reduced))
testdata <- data.frame(rating=c(1,2,3,4,5), age=mean(Affairs$age), yearsmarried=mean(yearsmarried), religiousness=mean(religiousness))
testdata
testdata$prob <- predict(fit.reduced, newdata=testdata, type="response")
testdata
testdata <- data.frame(rating=mean(Affairs$rating), age=seq(17,57, 10), yearsmarried=mean(Affairs$yearsmarried), religiousness=mean(religiousness))
testdata$prob <- predict(fit.reduced, newdata=testdata, type="response")
testdata
deviance(fit.reduced/df.residual(fit.reduced))
deviance(fit.reduced)/df.residual(fit.reduced)
fit.od <- glm(ynaffair ~ age + yearsmarried + religiousness + rating, family = quasibinomial(link ="logit"))
fit.od <- glm(Affairs$ynaffair ~ age + yearsmarried + religiousness + rating, family = quasibinomial(link ="logit"))
pchisq(summary(fit.od)$dispersion * fit$df.residual, fit$df.residual, lower=F)
pchisq(summary(fit.od)$dispersion * fit.residual$df, fit.residual$df, lower=F)
pchisq(summary(fit.od)$dispersion * fit.reduced$df.residual, fit.reduced$df.residual, lower=F)
install.packages("robust")
data(brewslow.dat, package="robust")
data(breslow.dat, package="robust")
names(breslow.dat)
summary(breslow.dat[c(6,7,8,10)])
opar <- par(no.readonly=TRUE)
par(mfrow=c(1,2))
attach(breslow.dat)
hist(sumY, breaks=20, xlab="Seizure Count", main="Distribution of Seizures")
boxplot(sumY ~ Trt, xlab="Treatment", main="Group Comparisons")
par(opar)
fit <- glm(sumY ~ Base + Age + Trt, data=breslow.dat, family=poisson())
summary(fit)
fit$coefficients
exp(fit$coefficients)
deviance(fit)/df.residual(fit)
install.packages("qcc")
fit.o <- glm(sumY ~ Base + Age + Trt, data=breslow.dat, family=quasipoisson())
sum(c(1:20))
sum(c(1:19))
savehistory("Generalized Linear Models.Rhistory")
install.packages("flexclust")
pkgs <- c("rpart", "rpart.plot", "party", "randomForest", "e1071")
install.packages(pkgs, depend=T)
x <- c(1,2,3,4,5,6,7,8)
print (x)
ttr(x, "dim") <- c(2,4)
attr(x, "dim") <- c(2,4)
print (x)
dim(x)
class(x)
paste(c("A"), c(1,2), sep="")
attr(x, "dimnames") <- list(paste(c("A"), c(1,2), sep=""), paste(c("B"), c(1:4), sep=""))
print(x)
head(iris)
unclass(iris)
set.seed(1234)
fit <- kmeans(iris[1:4], 3)
names(fit)
sapply(fit, class)
names(fit)
fit[c(2,7)]
fit
fit[2]
fit[[2]]
fit$centers[2]
fit$centers[4]
fit$centers[1,2]
fit$centers
fit[[2]]
fit[[2]][,2]
fit[[2]][1,]
means <- fit$centers
library(reshape2)
install.packages("reshape2")
library(reshape2)
dfm <- melt(means)
names(dfm) <- c("Cluster", "Measurement", "Centimeters")
dfm$Cluster <- factor(dfm$Cluster)
head(dfm)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(data=dfm, aes(x=Measurement, y=Centimeters, group=Cluster)) + geom_point(size = 3, aes(shape=Cluster, color=Cluster)) + geom_line(size=1, aes(color,Cluster)) + ggtitle("Profiles for Iris Clusters")
ggplot(data=dfm, aes(x=Measurement, y=Centimeters, group=Cluster)) + geom_point(size = 3, aes(shape=Cluster, color=Cluster)) + geom_line(size=1, aes(color=Cluster)) + ggtitle("Profiles for Iris Clusters")
"+"(2,2)
args(sapply)
